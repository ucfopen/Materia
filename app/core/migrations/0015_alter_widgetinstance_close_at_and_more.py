# Generated by Django 5.0.1 on 2025-02-06 19:20
from datetime import datetime

from django.db import migrations, models
from django.db.models import F


# class WidgetInstanceInMigration(models.Model):
#     id = models.CharField(primary_key=True, max_length=10, db_collation="utf8_bin")
#     open_at_dt = models.DateTimeField(default=datetime.now)
#     created_at_ts = models.IntegerField(default=0, db_column="created_at")
#
#     class Meta:
#         managed = False
#         db_table = "widget_instance"


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0014_alter_widget_is_generable_and_more'),
    ]

    @staticmethod
    def translate_timestamps(apps, schema_editor):
        import logging

        logger = logging.getLogger("django")

        def timestamp_to_datetime(ts):
            if ts is None:
                return None
            from django.utils.timezone import make_aware

            return make_aware(datetime.fromtimestamp(ts))

        WidgetInstance = apps.get_model('core', 'WidgetInstance')

        logger.info("Converting additional WidgetInstance timestamps to datetimes")
        for instance in WidgetInstance.objects.all():
            instance.close_at = timestamp_to_datetime(instance.close_at_ts)
            instance.open_at = timestamp_to_datetime(instance.open_at_ts)
            instance.updated_at = timestamp_to_datetime(instance.updated_at_ts)
            instance.save()

    @staticmethod
    def translate_datetimes(apps, schema_editor):
        import logging

        logger = logging.getLogger("django")

        def datetime_to_timestamp(dt):
            if dt is None:
                return None
            from datetime import datetime

            return datetime.timestamp(dt)

        WidgetInstance = apps.get_model('core', 'WidgetInstance')

        logger.info("Converting additional WidgetInstance datetimes to timestamps")
        for asset in WidgetInstance.objects.all():
            asset.close_at_ts = datetime_to_timestamp(asset.close_at)
            asset.open_at_ts = datetime_to_timestamp(asset.open_at)
            asset.updated_at_ts = datetime_to_timestamp(asset.updated_at)
            asset.save()

    operations = [
        # Add _ts to ends of current fields
        migrations.RenameField(
            model_name="widgetinstance",
            old_name="close_at",
            new_name="close_at_ts",
        ),
        migrations.RenameField(
            model_name="widgetinstance",
            old_name="open_at",
            new_name="open_at_ts",
        ),
        migrations.RenameField(
            model_name="widgetinstance",
            old_name="updated_at",
            new_name="updated_at_ts",
        ),

        # Add datetime version of fields to models
        migrations.AddField(
            model_name="widgetinstance",
            name="close_at",
            field=models.DateTimeField(default=None, null=True, db_column="close_at"),
        ),
        migrations.AddField(
            model_name="widgetinstance",
            name="open_at",
            field=models.DateTimeField(default=None, null=True, db_column="open_at"),
        ),
        migrations.AddField(
            model_name="widgetinstance",
            name="updated_at",
            field=models.DateTimeField(default=None, null=True, db_column="updated_at"),
        ),

        # Run conversions, translating x_at_ts to x_at
        migrations.RunPython(translate_timestamps, translate_datetimes),

        # Remove the _ts fields
        migrations.RemoveField(
            model_name="widgetinstance",
            name="close_at_ts"
        ),
        migrations.RemoveField(
            model_name="widgetinstance",
            name="open_at_ts"
        ),
        migrations.RemoveField(
            model_name="widgetinstance",
            name="updated_at_ts"
        ),
    ]
